Patch "Fix Depth Effects on Intel GPUs" in "Fixes/Graphics" by "Skyth"
{
    WriteAsmHook(ASLR(0xC2B233), HookBehavior.Replace, @"
    mov eax, dword ptr [ebp + 8]

    loop:
    cmp dword ptr [eax], 0xFFFF
    jz break

    cmp dword ptr [eax], 0x3B7F0001
    jnz continue
    cmp dword ptr [eax + 4], 0x377F0001
    jnz continue
    cmp dword ptr [eax + 8], 0x3F7F0001
    jnz continue

    mov dword ptr [eax], 0x3F800000
    mov dword ptr [eax + 4], 0
    mov dword ptr [eax + 8], 0
    jmp break

    continue:
    add eax, 4
    jmp loop

    break:
    mov eax, [ecx + 0x64]
    mov ecx, [eax]
    ");
}

Patch "Fix Steam Profile Picture" in "Fixes/Graphics" by "ĐeäTh" does "Fixes the steam profile picture used on the Title Menu being squashed and stretched."
{
    #include "Helpers" noemit

    static class SteamIconFix
    {
        private static bool _isTitleMenuModified = false;
        private static bool _isAlreadyCompared = false;

        UNMANAGED_FUNCTION(void, IsTitleMenuModifiedImpl, IntPtr in_pResourceName, IntPtr in_pResource)
        {
            if (_isAlreadyCompared)
                return;

            byte* pResourceName = (byte*)in_pResourceName;
            byte[] name = new byte[16];
            for (int i = 0; i < 16; i++)
                name[i] = pResourceName[i];

            string fileName = System.Text.Encoding.UTF8.GetString(name);

            if (fileName != "ui_titlemenu_ugp")
                return;

            int checksum = 0;
            for (int i = 0; i < 0x30BD0; i++)
                checksum += ((byte*)in_pResource)[i];

            Console.WriteLine(checksum.ToString("X"));

            _isAlreadyCompared = true;

            if (checksum != 0x9D9836)
                _isTitleMenuModified = true;
        }

        public static long IsTitleMenuModified() => GET_UNMANAGED_FUNCTION_PTR(IsTitleMenuModifiedImpl);

        UNMANAGED_FUNCTION(void, UnstretchImpl, IntPtr in_pHudGoc)
        {
            if (_isTitleMenuModified)
                return;
            
            IntPtr rcProjects = *(IntPtr*)IntPtr.Add(in_pHudGoc, 0x40);
            IntPtr rcProject = *(IntPtr*)IntPtr.Add(rcProjects, 0);
            IntPtr pBinaryProject = *(IntPtr*)IntPtr.Add(rcProject, 0x64);
            IntPtr pScenes = *(IntPtr*)IntPtr.Add(pBinaryProject, 0xC);
            IntPtr pLayers = *(IntPtr*)IntPtr.Add(pScenes, 0x10);
            IntPtr pMiiIconLayerCells = *(IntPtr*)IntPtr.Add(pLayers, 0x3C);
            float* pMiiIconCellScaleX = (float*)IntPtr.Add(pMiiIconLayerCells, 0x1D4);
            float* pMiiIconCellScaleY = (float*)IntPtr.Add(pMiiIconLayerCells, 0x1D8);

            *pMiiIconCellScaleX = 1.0125f;
            *pMiiIconCellScaleY = 1.0125f;
        }

        public static long Unstretch() => GET_UNMANAGED_FUNCTION_PTR(UnstretchImpl);
    }

    WriteAsmHook
    (
        $@"
            push ebx
            push eax
            push edx
            mov edx, eax
            push edx
            mov ebx, [ebp + 0xC]
            push ebx
            mov eax, {SteamIconFix.IsTitleMenuModified()}
            call eax

            pop edx
            pop eax
            pop ebx

            push 0
            push eax
            lea ecx, [ebp + 0x10]
        ",
        ASLR(0x50EEF2), HookBehavior.Replace
    )

    WriteAsmHook
    (
        $@"
            push ebx
            mov ebx, [esi + 0xD4]
            push ebx
            mov eax, {SteamIconFix.Unstretch()}
            call eax

            pop ebx
            mov ecx, [esi + 0xD4]

        ",
        ASLR(0x5296E9), HookBehavior.Replace
    )
}

Patch "Fix Pull Switch Grip Height" in "Fixes" by "ĐeäTh" does "Fixes the position of Sonic's grip compared to the light switches found in Silent Forest Act 4." 
WriteProtected<float>(ASLR(0xDF2D14), -10.5f)

Patch "Fix Super Sonic Mouth Switching" in "Fixes/Graphics" by "ĐeäTh & Sajid" does
/*
Fixes the double mouth showing up on Super Sonic's Model instead of the mouth swapping working in real time.
*/
// The following is copied assembly from a compiled C++ DLL code.
// The full C++ source code for the code for this code can be found on:
// https://github.com/DeaTh-G/slw-super-sonic-fix 

{
MemoryProvider.SetAssemblerSymbol("aChrSupersonic", (uint)System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi("chr_supersonic").ToInt32());
MemoryProvider.SetAssemblerSymbol("aSonicMouthL", (uint)System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi("Sonic_Mouth_L").ToInt32());
MemoryProvider.SetAssemblerSymbol("buffer", (uint)System.Runtime.InteropServices.Marshal.AllocHGlobal(2097152).ToInt32());
MemoryProvider.SetAssemblerSymbol("pos", (uint)System.Runtime.InteropServices.Marshal.AllocHGlobal(4).ToInt32());
MemoryProvider.SetAssemblerSymbol("returnAddress", (uint)ASLR(0xBFDC16));

WriteAsmHook
(
    $@"
        push ebp
        mov ebp, esp
        sub esp, 0x18
        push ebx
        push esi
        push edi
        mov edi, ecx
        mov dword ptr ss:[ebp-0x18], edx
        mov ecx, dword ptr ss:[ebp+8]
        mov esi, aChrSupersonic
        mov dword ptr ss:[ebp-0xC], edi
        mov eax, ecx
        cmp byte ptr ds:[ecx], 0
        je loc_10003A87

    loc_10003A70:
        mov cl, byte ptr ds:[esi]
        test cl, cl
        je loc_10003A87
        mov dl, byte ptr ds:[eax]
        cmp dl, cl
        jne loc_10003B70
        inc eax
        inc esi
        cmp byte ptr ds:[eax], 0
        jne loc_10003A70

    loc_10003A87:
        cmp byte ptr ds:[eax], 0
        jne loc_10003F6D
        cmp byte ptr ds:[esi], 0

    loc_10003A93:
        jne loc_10003F6D
        mov ebx, dword ptr ds:[edi]
        mov ecx, dword ptr ds:[ebx]
        bswap ecx
        test ecx, ecx
        jns loc_10003F6D
        and ecx, 0x7FFFFFFF
        mov dword ptr ss:[ebp-4], 0
        mov dword ptr ss:[ebp-0x10], ecx
        mov edx, 0
        jbe loc_10003B25
        cmp ecx, 8
        jb loc_10003B25
        mov eax, ecx
        xorps xmm1, xmm1
        and eax, 0xFFFFFFF8
        xorps xmm2, xmm2
        xchg ax, ax

    loc_10003AD0:
        movd xmm0, dword ptr ds:[ebx+edx]
        punpcklbw xmm0, xmm0
        punpcklwd xmm0, xmm0
        psrad xmm0, 0x18
        paddd xmm1, xmm0
        movd xmm0, dword ptr ds:[ebx+edx+4]
        punpcklbw xmm0, xmm0
        add edx, 8
        punpcklwd xmm0, xmm0
        psrad xmm0, 0x18
        paddd xmm2, xmm0
        cmp edx, eax
        jb loc_10003AD0
        paddd xmm1, xmm2
        movaps xmm0, xmm1
        psrldq xmm0, 8
        paddd xmm1, xmm0
        movups xmm0, xmm1
        psrldq xmm0, 4
        paddd xmm1, xmm0
        movd dword ptr ss:[ebp-4], xmm1

    loc_10003B25:
        xor esi, esi
        xor edi, edi
        cmp edx, ecx
        jae loc_10003B87
        mov eax, ecx
        sub eax, edx
        cmp eax, 2
        jb loc_10003B60
        lea eax, dword ptr ds:[ecx-1]
        mov ecx, eax
        nop dword ptr ds:[eax+eax], eax

    loc_10003B40:
        movsx eax, byte ptr ds:[ebx+edx]
        add esi, eax
        movsx eax, byte ptr ds:[ebx+edx+1]
        add edx, 2
        add edi, eax
        cmp edx, ecx
        jb loc_10003B40
        mov ecx, dword ptr ss:[ebp-0x10]
        cmp edx, ecx
        jae loc_10003B7D
        nop dword ptr ds:[eax+eax], eax

    loc_10003B60:
        movsx eax, byte ptr ds:[ebx+edx]
        mov edx, dword ptr ss:[ebp-4]
        add edx, eax
        lea eax, dword ptr ds:[edi+esi]
        add edx, eax
        jmp loc_10003B8A

    loc_10003B70:
        movsx eax, cl
        movsx ecx, dl
        sub ecx, eax
        jmp loc_10003A93

    loc_10003B7D:
        mov edx, dword ptr ss:[ebp-4]
        lea eax, dword ptr ds:[edi+esi]
        add edx, eax
        jmp loc_10003B8A

    loc_10003B87:
        mov edx, dword ptr ss:[ebp-4]

    loc_10003B8A:
        cmp edx, 0x3E7A1D
        jne loc_10003F6A
        mov esi, dword ptr ss:[ebp-0xC]
        mov ebx, buffer
        mov dword ptr ds:[pos], ecx
        mov esi, dword ptr ds:[esi]
        cmp ebx, esi
        jae loc_10003BC3
        test ecx, ecx
        je loc_10003BDE
        mov edx, ebx
        sub esi, ebx

    loc_10003BB3:
        mov al, byte ptr ds:[esi+edx]
        lea edx, dword ptr ds:[edx+1]
        mov byte ptr ds:[edx-1], al
        sub ecx, 1
        jne loc_10003BB3
        jmp loc_10003BDE

    loc_10003BC3:
        jbe loc_10003BDE
        test ecx, ecx
        je loc_10003BDE
        lea edx, dword ptr ds:[ebx-1]
        add edx, ecx
        sub esi, ebx

    loc_10003BD0:
        mov al, byte ptr ds:[edx+esi]
        lea edx, dword ptr ds:[edx-1]
        mov byte ptr ds:[edx+1], al
        sub ecx, 1
        jne loc_10003BD0

    loc_10003BDE:
        mov esi, dword ptr ds:[ebx+8]
        lea edi, dword ptr ds:[ebx+0x10]
        mov eax, dword ptr ds:[ebx+0xC]
        xor edx, edx
        bswap esi
        bswap eax
        add esi, ebx
        test eax, eax
        je loc_10003C0C

    loc_10003BF3:
        mov ecx, dword ptr ds:[esi+edx*4]
        inc edx
        bswap ecx
        mov eax, dword ptr ds:[ecx+edi]
        bswap eax
        add eax, edi
        mov dword ptr ds:[ecx+edi], eax
        mov eax, dword ptr ds:[ebx+0xC]
        bswap eax
        cmp edx, eax
        jb loc_10003BF3

    loc_10003C0C:
        add dword ptr ds:[ebx+0x30], 0x1000000
        mov eax, dword ptr ds:[pos]
        mov edx, dword ptr ds:[ebx+0x30]
        bswap edx
        lea ecx, dword ptr ds:[eax+3]
        and ecx, 0xFFFFFFFC
        lea eax, dword ptr ds:[eax+edx*4]
        mov dword ptr ds:[pos], eax
        mov eax, dword ptr ds:[ebx+0x30]
        lea edx, dword ptr ds:[ecx+ebx]
        xor ecx, ecx
        bswap eax
        sub eax, 1
        je loc_10003C54
        nop word ptr ds:[eax+eax], ax

    loc_10003C40:
        mov eax, dword ptr ds:[ebx+0x34]
        mov eax, dword ptr ds:[eax+ecx*4]
        mov dword ptr ds:[edx+ecx*4], eax
        inc ecx
        mov eax, dword ptr ds:[ebx+0x30]
        bswap eax
        dec eax
        cmp ecx, eax
        jb loc_10003C40

    loc_10003C54:
        mov dword ptr ds:[ebx+0x34], edx
        mov edx, dword ptr ds:[pos]
        lea ecx, dword ptr ds:[edx+0xB]
        and ecx, 0xFFFFFFFC
        lea edi, dword ptr ds:[edx+3]
        and edi, 0xFFFFFFFC
        lea eax, dword ptr ds:[edx+0x3D]
        add edi, ebx
        mov dword ptr ds:[pos], eax
        lea edx, dword ptr ds:[ecx+ebx]
        test edx, edx
        je loc_10003CB8
        lea eax, dword ptr ds:[edx+0x28]
        mov dword ptr ds:[edx], 0x2000000
        mov esi, aSonicMouthL
        mov dword ptr ds:[edx+4], edi
        mov dword ptr ds:[edx+8], 0
        mov cl, 0x53
        mov dword ptr ds:[edx+0x10], 0
        sub esi, eax
        mov dword ptr ds:[edx+0x18], 0

    loc_10003CA4:
        mov byte ptr ds:[eax], cl
        lea eax, dword ptr ds:[eax+1]
        mov cl, byte ptr ds:[eax+esi]
        test cl, cl
        jne loc_10003CA4
        mov byte ptr ds:[eax], cl
        mov eax, dword ptr ds:[ebx+0x34]
        mov dword ptr ds:[eax+8], edx

    loc_10003CB8:
        test edi, edi
        je loc_10003D39
        mov eax, dword ptr ds:[ebx+0x34]
        mov eax, dword ptr ds:[eax]
        mov eax, dword ptr ds:[eax+4]
        mov eax, dword ptr ds:[eax+0xC]
        mov dword ptr ds:[edi], eax
        mov eax, dword ptr ds:[ebx+0x34]
        mov eax, dword ptr ds:[eax]
        mov eax, dword ptr ds:[eax+4]
        lea ecx, dword ptr ds:[eax+0xC]
        lea edx, dword ptr ds:[eax+0x10]
        cmp ecx, edx
        jae loc_10003D12
        lea eax, dword ptr ds:[edx+0x1F]
        lea esi, dword ptr ds:[ecx+0x1F]
        cmp ecx, eax
        ja loc_10003D02
        cmp esi, edx
        jb loc_10003D02
        mov edx, 0x20

    loc_10003CF2:
        mov al, byte ptr ds:[ecx+4]
        lea ecx, dword ptr ds:[ecx+1]
        mov byte ptr ds:[ecx-1], al
        sub edx, 1
        jne loc_10003CF2
        jmp loc_10003D2E

    loc_10003D02:
        movups xmm0, xmmword ptr ds:[edx]
        movups xmmword ptr ds:[ecx], xmm0
        movups xmm0, xmmword ptr ds:[edx+0x10]
        movups xmmword ptr ds:[ecx+0x10], xmm0
        jmp loc_10003D2E

    loc_10003D12:
        jbe loc_10003D2E
        add ecx, 0x1F
        mov edx, 0x20
        nop dword ptr ds:[eax], eax

    loc_10003D20:
        mov al, byte ptr ds:[ecx+4]
        lea ecx, dword ptr ds:[ecx-1]
        mov byte ptr ds:[ecx+1], al
        sub edx, 1
        jne loc_10003D20

    loc_10003D2E:
        mov eax, dword ptr ds:[ebx+0x34]
        mov eax, dword ptr ds:[eax]
        add dword ptr ds:[eax], 0xFF000000

    loc_10003D39:
        mov esi, dword ptr ds:[pos]
        add dword ptr ds:[pos], 0x2C
        add esi, 3
        and esi, 0xFFFFFFFC
        add esi, ebx
        mov dword ptr ss:[ebp-0x10], esi
        je loc_10003D9C
        mov eax, dword ptr ds:[ebx+0x34]
        mov eax, dword ptr ds:[eax]
        mov eax, dword ptr ds:[eax+4]
        mov eax, dword ptr ds:[eax]
        mov eax, dword ptr ds:[eax]
        mov dword ptr ds:[esi], eax
        mov eax, dword ptr ds:[ebx+0x34]
        mov eax, dword ptr ds:[eax]
        mov eax, dword ptr ds:[eax+4]
        mov eax, dword ptr ds:[eax]
        mov eax, dword ptr ds:[eax+0x18]
        mov dword ptr ds:[esi+0x18], eax
        mov eax, dword ptr ds:[ebx+0x34]
        mov eax, dword ptr ds:[eax]
        mov eax, dword ptr ds:[eax+4]
        mov eax, dword ptr ds:[eax]
        mov ecx, dword ptr ds:[eax+0x24]
        mov eax, dword ptr ds:[eax+0x28]
        mov dword ptr ds:[esi+0x24], ecx
        mov dword ptr ds:[esi+0x28], eax
        mov dword ptr ds:[esi+0xC], 0x4C000000
        mov dword ptr ds:[esi+0x10], 0x68000000
        test edi, edi
        je loc_10003D9C
        mov dword ptr ds:[edi+4], esi

    loc_10003D9C:
        mov eax, dword ptr ds:[pos]
        lea edx, dword ptr ds:[eax+0x118]
        lea edi, dword ptr ds:[eax+ebx]
        mov dword ptr ds:[pos], edx
        mov ecx, dword ptr ds:[esi+0x10]
        add eax, 3
        and eax, 0xFFFFFFFE
        add eax, ebx
        mov dword ptr ss:[ebp-8], eax
        mov eax, dword ptr ds:[esi+0xC]
        bswap ecx
        bswap eax
        imul ecx, eax
        add ecx, edx
        mov dword ptr ds:[pos], ecx
        lea ecx, dword ptr ds:[edx+ebx]
        mov dword ptr ss:[ebp-4], ecx
        test edi, edi
        je loc_10003DE9
        mov word ptr ds:[edi], 0x332F
        mov dword ptr ds:[esi+0x1C], 0x2000000
        mov dword ptr ds:[esi+0x20], edi

    loc_10003DE9:
        cmp dword ptr ss:[ebp-8], 0
        je loc_10003E81
        mov eax, dword ptr ds:[ebx+0x34]
        xor edi, edi
        xor edx, edx
        mov eax, dword ptr ds:[eax]
        mov eax, dword ptr ds:[eax+4]
        mov esi, dword ptr ds:[eax]
        mov eax, dword ptr ds:[esi+4]
        bswap eax
        test eax, eax
        je loc_10003E73
        mov ebx, dword ptr ss:[ebp-8]
        nop dword ptr ds:[eax], eax

    loc_10003E10:
        mov eax, dword ptr ds:[esi+8]
        movzx ecx, word ptr ds:[eax+edx*2]
        mov eax, 0xFFFF
        cmp cx, ax
        je loc_10003E60
        mov ah, cl
        mov al, ch
        mov ecx, dword ptr ds:[esi+0x10]
        mov dword ptr ss:[ebp-0x14], eax
        movzx eax, ax
        bswap ecx
        imul ecx, eax
        mov eax, dword ptr ds:[esi+0x14]
        mov al, byte ptr ds:[ecx+eax+0x60]
        cmp al, 9
        je loc_10003E42
        cmp al, 0xA
        jne loc_10003E60

    loc_10003E42:
        mov ecx, dword ptr ss:[ebp-0x14]
        add ecx, 0xFFFFFF02
        mov ah, cl
        mov al, ch
        mov ecx, 0xFFFF
        mov word ptr ds:[ebx+edi*2], ax
        inc edi
        mov eax, dword ptr ds:[esi+8]
        mov word ptr ds:[eax+edx*2], cx

    loc_10003E60:
        mov eax, dword ptr ds:[esi+4]
        inc edx
        bswap eax
        cmp edx, eax
        jb loc_10003E10
        mov ebx, buffer
        mov ecx, dword ptr ss:[ebp-4]

    loc_10003E73:
        mov esi, dword ptr ss:[ebp-0x10]
        mov eax, dword ptr ss:[ebp-8]
        bswap edi
        mov dword ptr ds:[esi+4], edi
        mov dword ptr ds:[esi+8], eax

    loc_10003E81:
        test ecx, ecx
        je loc_10003F5A
        mov eax, dword ptr ds:[ebx+0x34]
        xor edi, edi
        mov dword ptr ss:[ebp-8], edi
        mov eax, dword ptr ds:[eax]
        mov eax, dword ptr ds:[eax+4]
        mov eax, dword ptr ds:[eax]
        mov dword ptr ss:[ebp-0x14], eax
        mov ecx, dword ptr ds:[eax+0xC]
        mov edx, dword ptr ds:[eax+0x10]
        mov eax, edx
        bswap ecx
        bswap eax
        imul ecx, eax
        test ecx, ecx
        je loc_10003F54
        xor ebx, ebx

    loc_10003EB4:
        mov eax, dword ptr ss:[ebp-0x14]
        add edi, dword ptr ds:[eax+0x14]
        mov al, byte ptr ds:[edi+0x60]
        cmp al, 9
        je loc_10003EC5
        cmp al, 0xA
        jne loc_10003F22

    loc_10003EC5:
        mov ecx, dword ptr ds:[esi+0x10]
        bswap ecx
        imul ecx, ebx
        bswap edx
        add ecx, dword ptr ss:[ebp-4]
        cmp ecx, edi
        jae loc_10003EF0
        test edx, edx
        je loc_10003F11
        sub edi, ecx
        nop dword ptr ds:[eax], eax

    loc_10003EE0:
        mov al, byte ptr ds:[edi+ecx]
        lea ecx, dword ptr ds:[ecx+1]
        mov byte ptr ds:[ecx-1], al
        sub edx, 1
        jne loc_10003EE0
        jmp loc_10003F11

    loc_10003EF0:
        jbe loc_10003F11
        test edx, edx
        je loc_10003F11
        lea esi, dword ptr ds:[ecx-1]
        add esi, edx
        sub edi, ecx
        nop dword ptr ds:[eax], eax

    loc_10003F00:
        mov al, byte ptr ds:[esi+edi]
        lea esi, dword ptr ds:[esi-1]
        mov byte ptr ds:[esi+1], al
        sub edx, 1
        jne loc_10003F00
        mov esi, dword ptr ss:[ebp-0x10]

    loc_10003F11:
        mov eax, dword ptr ds:[esi+0x10]
        mov ecx, dword ptr ss:[ebp-4]
        bswap eax
        imul eax, ebx
        add byte ptr ds:[eax+ecx+0x60], 0xF7
        inc ebx

    loc_10003F22:
        mov eax, dword ptr ds:[esi+0xC]
        bswap eax
        cmp ebx, eax
        je loc_10003F4E
        mov eax, dword ptr ss:[ebp-0x14]
        mov edi, dword ptr ss:[ebp-8]
        add edi, 0x68
        mov dword ptr ss:[ebp-8], edi
        mov edx, dword ptr ds:[eax+0x10]
        mov ecx, edx
        mov eax, dword ptr ds:[eax+0xC]
        bswap ecx
        bswap eax
        imul ecx, eax
        cmp edi, ecx
        jb loc_10003EB4

    loc_10003F4E:
        mov ebx, buffer

    loc_10003F54:
        mov eax, dword ptr ss:[ebp-4]
        mov dword ptr ds:[esi+0x14], eax

    loc_10003F5A:
        mov eax, dword ptr ss:[ebp-0xC]
        mov ecx, eax
        mov dword ptr ds:[ebx+0xC], 0
        mov dword ptr ds:[eax], ebx
        jmp loc_10003F6F

    loc_10003F6A:
        mov edi, dword ptr ss:[ebp-0xC]

    loc_10003F6D:    
        mov ecx, edi

    loc_10003F6F:
        push dword ptr ss:[ebp+0x10]
        mov edx, dword ptr ss:[ebp-0x18]
        push dword ptr ss:[ebp+0xC]
        push dword ptr ss:[ebp+8]
        call originalReplace
        pop edi
        pop esi
        pop ebx
        mov esp, ebp
        pop ebp
        ret 0xC
        endp
        
    originalReplace:
        push ebp
        mov ebp, esp
        sub esp, 0x3C
        mov eax, returnAddress
        jmp eax
    ",
    ASLR(0xBFDC10), HookBehavior.Replace
)
}

Patch "Enable Mouth Switching in 3D" in "Graphics" by "ĐeäTh" does "Enables the mouth switching to occur on the player anywhere instead of just in 2D sections."
{
    WriteNop(ASLR(0x8F263A), 2)
}

Patch "Fix Parkour Trail Model" in "Fixes/Graphics" by "ĐeäTh & Sajid" does "Fixes hidden meshes (such as the secondary mouth mesh) being visible from the player's after image effect created by wallrunning."
{
WriteAsmHook
(
    $@"
        mov ecx, [esi+0x320]
        mov ecx, [ecx]
        mov eax, edi
        push ecx
        push eax
        call copyVisibilityFlags
        add esp, 8
        jmp originalReplace

    copyVisibilityFlags:
        push    ebp
        mov     ebp, esp
        push    ebx
        mov     ebx, [ebp+0xC]
        push    edi
        xor     edi, edi
        mov     ecx, [ebx+0xE0]
        mov     eax, [ecx+0x58]
        cmp     [eax+4], edi
        jbe     loc_10072B3C
        push    esi
        xor     esi, esi
        nop     dword ptr [eax+eax]

    loc_10072B00:
        mov     eax, [ecx+0x58]
        mov     ecx, [eax]
        lea     eax, [ecx+esi]
        neg     ecx
        sbb     ecx, ecx
        and     ecx, eax
        mov     eax, [ecx]
        mov     ecx, [ebp+8]
        mov     ecx, [ecx+0xE0]
        mov     ecx, [ecx+0x58]
        mov     edx, [ecx]
        lea     ecx, [edx+esi]
        neg     edx
        lea     esi, [esi+0x5C]
        sbb     edx, edx
        inc     edi
        and     edx, ecx
        mov     [edx], eax
        mov     ecx, [ebx+0xE0]
        mov     eax, [ecx+0x58]
        cmp     edi, [eax+4]
        jb      loc_10072B00
        pop     esi

    loc_10072B3C:
        pop     edi
        pop     ebx
        pop     ebp
        ret

    originalReplace:
        pop edi
        mov dword ptr [esi+0x320]
    ",
    ASLR(0x4CB4B6), HookBehavior.Replace
)
}

Patch "Fix Rigid Bodies Falling Through Collision" in "Fixes" by "ĐeäTh & Darío" does "Fixes enemies falling through the collision of the level occasionally." 
static int UpdateBroadphaseAndResetCollisionInformationOfWarpedBody = (int)ASLR(0xAED500);
static int SetLinearVelocity = (int)ASLR(0xB88220);

WriteAsmHook
(
    $@"mov eax, {SetLinearVelocity}
    call eax
    mov edx, [esi+14h]
    mov edx, [edx+10h]
    push edx
    mov eax, {UpdateBroadphaseAndResetCollisionInformationOfWarpedBody}
    call eax
    add esp, 4",
    ASLR(0x4B974F), HookBehavior.Replace
)