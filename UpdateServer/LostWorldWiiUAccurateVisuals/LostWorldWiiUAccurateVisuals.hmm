Library "WiiUAccurateVisualsConfig"
{
	#lib "HMM"
	#lib "INI"

	public static bool isInitialised = false;

	public static bool depthOfField = true;

	[LibraryInitializer]
	public void Init()
	{
		if (isInitialised)
			return;

		var mod = HMM.GetModByID("bsthlc.lostworldwiiuaccuratevisuals");
		var modPath = mod.Path;
		var configPath = System.IO.Path.Combine(modPath, "LostWorldWiiUAccurateVisuals.ini");

		var iniData = INI.Read(configPath);

		depthOfField = bool.Parse(iniData["WiiUAccurateVisuals"]["DepthOfField"]);

		isInitialised = true;
	}
}

Patch "Fix Depth of Field Draw Order" in "Fixes/Graphics" by "Sajid & ĐeäTh" does "Changes the pseudo-dof implementation of the game into the proper one seen on Wii U."
//
	#lib "WiiUAccurateVisualsConfig"
    
	static bool _isInitialised = false;
    
    static int p_DofRes = (int)ASLR(0x00FEFC7C);
    static int p_GrassRes = (int)ASLR(0x00FB6D1C);
    static int p_ShadowRes = (int)ASLR(0x00FB6D1D);
    static int p_RetAddress = (int)ASLR(0x00904E94);
//
{
    WiiUAccurateVisualsConfig.Init();

    if (!WiiUAccurateVisualsConfig.depthOfField)
        _isInitialised = true;

	if (!WiiUAccurateVisualsConfig.isInitialised || _isInitialised)
		return;

    WriteAsmHook
    (
        $@"mov al, byte ptr [edi+28Ch]
        mov dl, [{p_DofRes}]
        and al, dl
        mov [edi+28Ch], al
        cmp byte ptr [{p_GrassRes}], 0
        sete cl
        mov [edi+49Ch], cl
        mov al, [{p_ShadowRes}]
        mov [edi+4F4h], al

        mov eax, {p_RetAddress}
        jmp eax",
        ASLR(0x00904E64), HookBehavior.Replace
    )
    
	_isInitialised = true;
}


Patch "Fix Depth Effects on Intel GPUs" in "Fixes/Graphics" by "Skyth"
//
	#lib "WiiUAccurateVisualsConfig"
    
	static bool _isInitialised = false;
//
{
    WiiUAccurateVisualsConfig.Init();

    if (!WiiUAccurateVisualsConfig.depthOfField)
        _isInitialised = true;

	if (!WiiUAccurateVisualsConfig.isInitialised || _isInitialised)
		return;

    WriteAsmHook(ASLR(0x00C2B233), HookBehavior.Replace, @"
    mov eax, dword ptr [ebp + 8]

    loop:
    cmp dword ptr [eax], 0xFFFF
    jz break

    cmp dword ptr [eax], 0x3B7F0001
    jnz continue
    cmp dword ptr [eax + 4], 0x377F0001
    jnz continue
    cmp dword ptr [eax + 8], 0x3F7F0001
    jnz continue

    mov dword ptr [eax], 0x3F800000
    mov dword ptr [eax + 4], 0
    mov dword ptr [eax + 8], 0
    jmp break

    continue:
    add eax, 4
    jmp loop

    break:
    mov eax, [ecx + 0x64]
    mov ecx, [eax]
    ");
    
	_isInitialised = true;
}
